

#1.Write a Python program to check that a string contains only a certain set of characters (in this case A-Pand 5-9)
import re
def check_string(n):
  rn = r'^[A-P-p5-9]+$'
  if re.fullmatch(rn, n):
    return ("GOOD string")
  else:
    return ("BAD string")
print(check_string("ABCP579"))
print(check_string("ABQ579"))
print(check_string("A9P"))
print(check_string("a5P"))
     

GOOD string
BAD string
GOOD string
BAD string


#2.Write a Python program that matches a string that has an ‘a’ followed by zero or more k's
import re
def match_ak(str1):
        ak = 'a(k*)'
        if re.search(ak,str1):
          return ("Match Found")
        else:
          return ("No Match")
print(match_ak("a"))
print(match_ak("ak"))
print(match_ak("akkk"))
print(match_ak("b"))
print(match_ak("akkp"))
     

Match Found
Match Found
Match Found
No Match
Match Found


#3.Write a Python program that matches a string that has an ‘a’ followed by one or more p's
import re
def match_app(str1):
        ak = 'ap(p*)'
        if re.search(ak,str1):
          return ("Match Found")
        else:
          return ("No Match")
print(match_app("ap"))
print(match_app("appp"))
print(match_app("a"))
     

Match Found
Match Found
No Match


#4.Write a Python program that matches a string that has an ‘a’ followed by zero or one z's
import re
def match_az(str1):
        az = 'a(z?)'
        if re.search(az,str1):
          return ("Match Found")
        else:
          return ("No Match")
print(match_az("a"))
print(match_az("az"))
print(match_az("azz"))
     

Match Found
Match Found
Match Found


#5.Write a python program that matches string that has an 'a' followed by 3 'h' only not 4
import re
def match_ahh(text):
    pattern = r"ah{3}"
    match = re.search(pattern, text)
    if match:
        return "Match Found"
    else:
        return "No Match"
print(match_ahh("ahhh"))
print(match_ahh("ahh"))
print(match_ahh("ahhhh"))
     

Match Found
No Match
Match Found


#6.Write a python program that matches string that has an 'a' followed by two to three 'b'
import re
def match_abb(text):
    pattern = r"ab{2,3}"
    match = re.search(pattern, text)
    if match:
        return "Match Found"
    else:
        return "No Match"
print(match_abb("abb"))
print(match_abb("abbb"))
print(match_abb("ab"))
     

Match Found
Match Found
No Match


#7.Write a Python program to find sequences of lowercase letters joined with an underscore.
import re
def extract_lowercase_underscore(text):
    pattern = r"[a-z]+_[a-z]+"
    match = re.search(pattern, text)
    if match:
        return "Match Found"
    else:
        return "No Match"
print(extract_lowercase_underscore("hello_world"))
print(extract_lowercase_underscore("HELLO_world"))
print(extract_lowercase_underscore("hi_SARA"))
print(extract_lowercase_underscore("hi sara"))
print(extract_lowercase_underscore("cse_e"))

     

Match Found
No Match
No Match
No Match
Match Found


#8. Write a Python program to find the sequences of one upper case letter followed by lower case letters.
import re
def match_upper_lower(text):
    pattern = r"[A-Z][a-z]+"
    match = re.search(pattern, text)
    if match:
        return "Match Found"
    else:
        return "No Match"
print(match_upper_lower("Hello"))
print(match_upper_lower("hello"))
print(match_upper_lower("HELLO"))

     

Match Found
No Match
No Match


#9.Write a Python program that matches a string that has an 'a' followed by anything, ending in 'a'.
import re
def match_a_anything_a(text):
    pattern = r"a.*a$"
    match = re.match(pattern, text)
    if match:
        return "Match Found"
    else:
        return "No Match"
print(match_a_anything_a("abcda"))
print(match_a_anything_a("a123a"))
print(match_a_anything_a("a"))
print(match_a_anything_a("ab"))
     

Match Found
Match Found
No Match
No Match


#10.Write a Python program that matches only words made of letters at the beginning of a string.
import re
def match_word_start(s):
  p=r'^[a-zA-Z]+'
  if re.match(p,s):
    return ("Match Found")
  else:
    return ("No match")
print(match_word_start("Hello world"))
print(match_word_start("!123hi"))
print(match_word_start("123hello"))
     

Match Found
No match
No match


#11.Write a Python program that matches only words made of letters and numbers at the end of a string.
import re
def match_word_end(s):
  p=r"[a-zA-Z0-9]+$"
  if re.search(p,s):
    return ("Match Found")
  else:
    return ("No match")
print(match_word_end("Hello world"))
print(match_word_end("12345"))
print(match_word_end("Done!"))
     

Match Found
Match Found
No match


#12.Write a Python program that matches a word containing 'z'.
import re
def match_word_z(s):
  p=r"[z]"
  if re.findall(p,s):
    return s
  else:
    return ("(empty)")
print(match_word_z("buzzing bee"))
print(match_word_z("hello world"))
print(match_word_z("zebra"))
     

buzzing bee
(empty)
zebra


#13.Write a Python program that matches a word containing 'i', not at start not at the end of the string.
import re
def match_i_not_start_end(s):
    pattern = r"^[a-z]+i[a-z]+$"
    words = s.split()
    for word in words:
        if re.match(pattern, word):
            return s
    return "(empty)"
print(match_i_not_start_end("driving fast"))
print(match_i_not_start_end("ice cream"))
print(match_i_not_start_end("hi hello"))
     

driving fast
(empty)
(empty)


#14.Write a Python program to match a string that contains upper and lowercase letters, numbers and underscore only.
import re
def match_alnum_underscore(s):
  p=r'^[a-zA-Z0-9]+_[a-zA-Z0-9]+$'
  if re.findall(p,s):
    return s
  else:
    return ("(empty)")
print(match_alnum_underscore("Valid_name"))
print(match_alnum_underscore("!invalid_name"))
     

Valid_name
(empty)


#15.Write a Python program that starts with 8.
import re
def s8(s):
  p=r'^8'
  if re.match(p,s):
    return "Starts with 8"
  else:
    return "Does not start with 8"
print(s8("8hello"))
print(s8("hello"))
     

Starts with 8
Does not start with 8


#16.Write a Python program to remove leading zeros from an IP address.
import re
def remove_leading_zeros(ip):
    return re.sub(r'\b0+(\d)', r'\1', ip)
print(remove_leading_zeros("192.168.001.001"))
print(remove_leading_zeros("127.000.000.001"))
print(remove_leading_zeros("010.000.100.050"))
     

192.168.1.1
127.0.0.1
10.0.100.50


#17.Write a Python program to check for an underscore at the end of a string.
import re
def us(s):
  p=r"[_]$"
  if re.search(p,s):
    return("Ends with underscore")
  else:
    return("Does not end with underscore")
print(us("Date_"))
print(us("Day"))
print(us("Month_"))
print(us("Year!"))
     

Ends with underscore
Does not end with underscore
Ends with underscore
Does not end with underscore


#18.Write a Python program to search the numbers(0-9) of length between 1 to 3 for a given string.
import re
def find_numbers_1_to_3_digits(s):
    pattern = r'\b\d{1,3}\b'
    return re.findall(pattern, s)
print(find_numbers_1_to_3_digits("My numbers are 7, 45, 123, and 4567."))
print(find_numbers_1_to_3_digits("Code 004 and 009 are errors, but 9999 is fine."))
print(find_numbers_1_to_3_digits("No numbers here."))
     

['7', '45', '123']
['004', '009']
[]


#19. Write a Python program to search a set of strings in a given string. Sample text : 'Flowers are among the ecosystem’s most important and beautiful parts.My favourite flower is the rose amongst all the other flowers! A red rose is the most attractive flower to look at. The name of the flower ‘rose’ originates from
#the Latin word ‘Rosa’.' Searched for words : 'flower', ‘rose’.
import re

def search_words(text, words):
    pattern = r'\b(?:' + '|'.join(words) + r')\b'
    matches = re.findall(pattern, text, re.IGNORECASE)
    return matches
text = 'Flowers are among the ecosystem’s most important and beautiful parts. My favourite flower is the rose amongst all the other flowers! A red rose is the most attractive flower to look at. The name of the flower ‘rose’ originates from the Latin word ‘Rosa’.'
words_to_search = ['flower', 'rose']
found_words = search_words(text, words_to_search)
print("Matched words:", found_words)
print("Count:", len(found_words))
     

Matched words: ['flower', 'rose', 'rose', 'flower', 'flower', 'rose']
Count: 6


#20.Write a Python program to search a literals string in a string and also find the location within the original string where the pattern occurs.Sample text : 'Flowers are among the ecosystem’s most important and beautiful parts. My favourite flower is the rose amongst all the other flowers!
#A red rose is the most attractive flower to look at. The name of the flower ‘rose’ originates from the Latin word ‘Rosa’.' Searched for word :‘rose’.
import re
def find_word_locations(text, word):
    pattern = r'\b' + re.escape(word) + r'\b'
    matches = re.finditer(pattern, text, re.IGNORECASE)

    result = []
    for match in matches:
        result.append({
            'word': match.group(),
            'start': match.start(),
            'end': match.end()
        })
    return result
results = find_word_locations(text, 'rose')
for entry in results:
    print(entry)
     

{'word': 'rose', 'start': 97, 'end': 101}
{'word': 'rose', 'start': 139, 'end': 143}
{'word': 'rose', 'start': 210, 'end': 214}


#21.Write a Python program to find the substrings within a string. Sample text :'Python exercises, C exercises, Java exercises' Pattern : 'exercises'.
import re
def find_substrings(text, pattern):
    return re.findall(pattern, text, re.IGNORECASE)

text = 'Python exercises, C exercises, Java exercises'
pattern = 'exercises'
results = find_substrings(text, pattern)
print(results)
     

['exercises', 'exercises', 'exercises']


#22.Write a Python program to find the occurrence and starting position of the substrings within a string.
import re

def find_occurrences(text, pattern):
    matches = re.finditer(re.escape(pattern), text, re.IGNORECASE)
    result = {}
    for i, match in enumerate(matches, start=1):
        result[f"occurrence_{i}"] = {'match': match.group(), 'start': match.start()}
    return result

text = 'Python exercises, C exercises, Java exercises'
pattern = 'exercises'
results = find_occurrences(text, pattern)
print(results)
     

{'occurrence_1': {'match': 'exercises', 'start': 7}, 'occurrence_2': {'match': 'exercises', 'start': 20}, 'occurrence_3': {'match': 'exercises', 'start': 36}}


#23.Write a Python program to replace whitespaces with an underscore and viceversa.
import re

def replace_whitespace_and_underscore(text, mode='space_to_underscore'):
    if mode == 'space_to_underscore':
        return re.sub(r'\s+', '_', text)
    elif mode == 'underscore_to_space':
        return re.sub(r'_+', ' ', text)
    else:
        return "Invalid mode. Use 'space_to_underscore' or 'underscore_to_space'."

text1 = "This is a sample text"
text2 = "This_is_a_sample_text"

print(replace_whitespace_and_underscore(text1, 'space_to_underscore'))
print(replace_whitespace_and_underscore(text2, 'underscore_to_space'))
     

This_is_a_sample_text
This is a sample text


#24.Write a python program to extract domain names from an url
import re

def extract_domain(url):
    # This pattern captures domain name after http:// or https:// and optional www.
    pattern = r'https?://(?:www\.)?([^/]+)'
    match = re.search(pattern, url)
    if match:
        return match.group(1)
    else:
        return "No domain found"

# Sample usage
urls = [
    "https://www.google.com/search",
    "http://example.org/about",
]

for url in urls:
    print(f"{url} → {extract_domain(url)}")
     

https://www.google.com/search → google.com
http://example.org/about → example.org


#25.Write a Python program to convert a date of dd-mm-yyyy format of yyyy-mm-dd format.
import re

def convert_date_format(date_str):
    pattern = r'^(\d{2})-(\d{2})-(\d{4})$'
    match = re.match(pattern, date_str)
    if match:
        day, month, year = match.groups()
        return f"{year}-{month}-{day}"
    else:
        return "Invalid date format"

dates = [
    "06-05-2025",
    "31-12-1999",
]

for d in dates:
    print(f"{d} → {convert_date_format(d)}")
     

06-05-2025 → 2025-05-06
31-12-1999 → 1999-12-31


#26.Write a Python program to match two words from a list for words starting with 'S'.
import re
from itertools import combinations

def match_s_words(word_list):
    s_words = [word for word in word_list if re.match(r'^s', word, re.IGNORECASE)]
    return list(combinations(s_words, 2))

words = ["Sun", "sky", "Cloud", "Star", "moon"]
pairs = match_s_words(words)
print("Matching 'S' word pairs:")
for pair in pairs:
    print(pair)
     

Matching 'S' word pairs:
('Sun', 'sky')
('Sun', 'Star')
('sky', 'Star')


#27.Write a Python program to separate and print numbers of a given string
import re

def extract_numbers(s):
    numbers = re.findall(r'\d+', s)
    return numbers
text = "The price is 45 dollars and 10 cents"
print("Extracted numbers:", extract_numbers(text))
     

Extracted numbers: ['45', '10']


#28.Write a Python program to find all words starting with 'a' or 'e'
import re

def find_words_starting_with_a_or_e(text):
    pattern = r'\b[aAeE]\w*'
    words = re.findall(pattern, text)
    return words

text = "Eagle is a bird and Fox is an animal."
print("Words starting with 'a' or 'e':", find_words_starting_with_a_or_e(text))
     

Words starting with 'a' or 'e': ['Eagle', 'a', 'and', 'an', 'animal']


#29.Write a Python program to separate and print the numbers and their positions.
import re

def extract_numbers_and_positions(text):
    matches = re.finditer(r'\d+', text)
    result = {match.group(): match.start() for match in matches}
    return result

text = "There a 2 cats, 15 dogs and 100 birds."
print("Numbers and their positions:", extract_numbers_and_positions(text))
     

Numbers and their positions: {'2': 8, '15': 16, '100': 28}


#30.Write a Python program to abbrevate 'End Of Day' as 'eod'. in a given string.'''import re

def abbreviate_end_of_day(text):
    return re.sub(r'\bEnd Of Day\b', 'eod', text, flags=re.IGNORECASE)
text = "The Meeting is scheduled by the End Of Day"
result = abbreviate_end_of_day(text)
print("Abbreviated Text:", result)
     

Abbreviated Text: The Meeting is scheduled by the eod



     
